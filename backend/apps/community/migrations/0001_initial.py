# Generated by Django 4.2.7 on 2025-09-03 06:01

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("users", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Achievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField()),
                (
                    "icon",
                    models.ImageField(blank=True, null=True, upload_to="achievements/"),
                ),
                ("category", models.CharField(max_length=50)),
                (
                    "criteria_type",
                    models.CharField(
                        choices=[
                            ("connections", "Number of Connections"),
                            ("mentorship_sessions", "Mentorship Sessions Completed"),
                            ("skills_verified", "Skills Verified"),
                            ("certifications", "Certifications Earned"),
                            ("group_participation", "Group Participation"),
                            ("project_contributions", "Project Contributions"),
                        ],
                        max_length=30,
                    ),
                ),
                ("criteria_value", models.PositiveIntegerField()),
                ("criteria_metadata", models.JSONField(default=dict)),
                ("is_active", models.BooleanField(default=True)),
                ("is_rare", models.BooleanField(default=False)),
                ("points_value", models.PositiveIntegerField(default=10)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "verbose_name": "Achievement",
                "verbose_name_plural": "Achievements",
                "db_table": "achievements",
                "ordering": ["category", "name"],
            },
        ),
        migrations.CreateModel(
            name="CommunityGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("slug", models.SlugField(unique=True)),
                ("is_public", models.BooleanField(default=True)),
                ("requires_approval", models.BooleanField(default=False)),
                ("max_members", models.PositiveIntegerField(blank=True, null=True)),
                ("focus_areas", models.JSONField(default=list)),
                ("member_count", models.PositiveIntegerField(default=0)),
                ("post_count", models.PositiveIntegerField(default=0)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="created_groups",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("focus_skills", models.ManyToManyField(blank=True, to="users.skill")),
                (
                    "moderators",
                    models.ManyToManyField(
                        blank=True,
                        related_name="moderated_groups",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Community Group",
                "verbose_name_plural": "Community Groups",
                "db_table": "community_groups",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="Connection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "connection_type",
                    models.CharField(
                        choices=[
                            ("mentor_mentee", "Mentor-Mentee"),
                            ("collaboration", "Collaboration"),
                            ("peer", "Peer Connection"),
                            ("friend", "Friend"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("accepted", "Accepted"),
                            ("rejected", "Rejected"),
                            ("blocked", "Blocked"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("message", models.TextField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("accepted_at", models.DateTimeField(blank=True, null=True)),
                (
                    "from_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sent_connections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "to_user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="received_connections",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Connection",
                "verbose_name_plural": "Connections",
                "db_table": "connections",
                "unique_together": {("from_user", "to_user")},
            },
        ),
        migrations.CreateModel(
            name="Mentorship",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("goals", models.JSONField(default=list)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("active", "Active"),
                            ("completed", "Completed"),
                            ("paused", "Paused"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="active",
                        max_length=20,
                    ),
                ),
                ("start_date", models.DateTimeField(default=django.utils.timezone.now)),
                ("end_date", models.DateTimeField(blank=True, null=True)),
                ("expected_duration_weeks", models.PositiveIntegerField(default=12)),
                (
                    "meeting_frequency",
                    models.CharField(
                        choices=[
                            ("weekly", "Weekly"),
                            ("biweekly", "Bi-weekly"),
                            ("monthly", "Monthly"),
                            ("as_needed", "As Needed"),
                        ],
                        default="weekly",
                        max_length=20,
                    ),
                ),
                ("preferred_meeting_duration", models.PositiveIntegerField(default=60)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "connection",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mentorship",
                        to="community.connection",
                    ),
                ),
                (
                    "mentee",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mentorship_relationships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "mentor",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="mentoring_relationships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("skills_focus", models.ManyToManyField(blank=True, to="users.skill")),
            ],
            options={
                "verbose_name": "Mentorship",
                "verbose_name_plural": "Mentorships",
                "db_table": "mentorships",
            },
        ),
        migrations.CreateModel(
            name="MentorshipSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("scheduled_date", models.DateTimeField()),
                ("actual_start_time", models.DateTimeField(blank=True, null=True)),
                ("actual_end_time", models.DateTimeField(blank=True, null=True)),
                ("agenda", models.TextField(blank=True, null=True)),
                ("notes", models.TextField(blank=True, null=True)),
                ("action_items", models.JSONField(default=list)),
                ("mentee_feedback", models.TextField(blank=True, null=True)),
                ("mentor_feedback", models.TextField(blank=True, null=True)),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("scheduled", "Scheduled"),
                            ("in_progress", "In Progress"),
                            ("completed", "Completed"),
                            ("cancelled", "Cancelled"),
                            ("no_show", "No Show"),
                        ],
                        default="scheduled",
                        max_length=20,
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "mentorship",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to="community.mentorship",
                    ),
                ),
            ],
            options={
                "verbose_name": "Mentorship Session",
                "verbose_name_plural": "Mentorship Sessions",
                "db_table": "mentorship_sessions",
                "ordering": ["-scheduled_date"],
            },
        ),
        migrations.CreateModel(
            name="ActivityFeed",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "activity_type",
                    models.CharField(
                        choices=[
                            ("connection_made", "Connection Made"),
                            ("mentorship_started", "Mentorship Started"),
                            ("session_completed", "Session Completed"),
                            ("skill_added", "Skill Added"),
                            ("certification_earned", "Certification Earned"),
                            ("group_joined", "Group Joined"),
                            ("project_joined", "Project Joined"),
                            ("achievement_earned", "Achievement Earned"),
                        ],
                        max_length=30,
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                (
                    "related_object_id",
                    models.PositiveIntegerField(blank=True, null=True),
                ),
                (
                    "related_object_type",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("metadata", models.JSONField(default=dict)),
                ("is_public", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "related_user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="related_activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="community_activities",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Activity Feed",
                "verbose_name_plural": "Activity Feeds",
                "db_table": "activity_feeds",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="UserAchievement",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("earned_at", models.DateTimeField(auto_now_add=True)),
                ("is_featured", models.BooleanField(default=False)),
                (
                    "achievement",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_achievements",
                        to="community.achievement",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="achievements",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Achievement",
                "verbose_name_plural": "User Achievements",
                "db_table": "user_achievements",
                "ordering": ["-earned_at"],
                "unique_together": {("user", "achievement")},
            },
        ),
        migrations.CreateModel(
            name="GroupMembership",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("member", "Member"),
                            ("moderator", "Moderator"),
                            ("admin", "Admin"),
                        ],
                        default="member",
                        max_length=20,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("active", "Active"),
                            ("suspended", "Suspended"),
                            ("left", "Left"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("joined_at", models.DateTimeField(auto_now_add=True)),
                ("left_at", models.DateTimeField(blank=True, null=True)),
                (
                    "group",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="memberships",
                        to="community.communitygroup",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="group_memberships",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Group Membership",
                "verbose_name_plural": "Group Memberships",
                "db_table": "group_memberships",
                "unique_together": {("group", "user")},
            },
        ),
    ]
