# Generated by Django 4.2.7 on 2025-09-05 12:46

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("users", "0001_initial"),
        ("projects", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Goal",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                (
                    "goal_type",
                    models.CharField(
                        choices=[
                            ("personal", "Personal Development"),
                            ("professional", "Professional Growth"),
                            ("skill", "Skill Development"),
                            ("project", "Project Completion"),
                            ("network", "Networking"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "priority",
                    models.CharField(
                        choices=[
                            ("low", "Low"),
                            ("medium", "Medium"),
                            ("high", "High"),
                            ("critical", "Critical"),
                        ],
                        default="medium",
                        max_length=10,
                    ),
                ),
                ("start_date", models.DateField()),
                ("target_date", models.DateField()),
                ("completed_date", models.DateField(blank=True, null=True)),
                (
                    "progress_percentage",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("is_completed", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "related_project",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="projects.project",
                    ),
                ),
                (
                    "related_skills",
                    models.ManyToManyField(blank=True, to="users.skill"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outvier_goals",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Goal",
                "verbose_name_plural": "Goals",
                "ordering": ["-priority", "target_date"],
            },
        ),
        migrations.CreateModel(
            name="GrowthPathway",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField()),
                ("pathway_type", models.CharField(max_length=50)),
                (
                    "difficulty_level",
                    models.CharField(
                        choices=[
                            ("beginner", "Beginner"),
                            ("intermediate", "Intermediate"),
                            ("advanced", "Advanced"),
                            ("expert", "Expert"),
                        ],
                        max_length=20,
                    ),
                ),
                ("learning_resources", models.JSONField(blank=True, default=list)),
                ("current_step", models.IntegerField(default=0)),
                ("total_steps", models.IntegerField(default=1)),
                ("is_completed", models.BooleanField(default=False)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "recommended_projects",
                    models.ManyToManyField(blank=True, to="projects.project"),
                ),
                (
                    "required_skills",
                    models.ManyToManyField(blank=True, to="users.skill"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outvier_pathways",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Growth Pathway",
                "verbose_name_plural": "Growth Pathways",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="TeamMatch",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "match_type",
                    models.CharField(
                        choices=[
                            ("project", "Project Collaboration"),
                            ("mentorship", "Mentorship"),
                            ("peer_learning", "Peer Learning"),
                            ("skill_exchange", "Skill Exchange"),
                        ],
                        max_length=20,
                    ),
                ),
                ("preferred_roles", models.JSONField(blank=True, default=list)),
                (
                    "compatibility_score",
                    models.IntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("is_active", models.BooleanField(default=True)),
                ("is_accepted", models.BooleanField(default=False)),
                ("accepted_at", models.DateTimeField(blank=True, null=True)),
                ("match_reason", models.TextField(blank=True)),
                ("suggested_roles", models.JSONField(blank=True, default=list)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "matched_users",
                    models.ManyToManyField(
                        blank=True,
                        related_name="matched_with",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "project_categories",
                    models.ManyToManyField(blank=True, to="projects.projectcategory"),
                ),
                (
                    "required_skills",
                    models.ManyToManyField(blank=True, to="users.skill"),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outvier_matches",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Team Match",
                "verbose_name_plural": "Team Matches",
                "ordering": ["-compatibility_score", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="ProgressInsight",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("insight_type", models.CharField(max_length=50)),
                ("title", models.CharField(max_length=200)),
                ("message", models.TextField()),
                (
                    "confidence_score",
                    models.FloatField(
                        default=0.5,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                    ),
                ),
                ("is_positive", models.BooleanField(default=True)),
                ("is_read", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "related_goal",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="outvier.goal",
                    ),
                ),
                (
                    "related_match",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="outvier.teammatch",
                    ),
                ),
                (
                    "related_pathway",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="outvier.growthpathway",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outvier_insights",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Progress Insight",
                "verbose_name_plural": "Progress Insights",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PersonalProfile",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "personality_type",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "communication_style",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "work_preference",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                ("strengths", models.JSONField(blank=True, default=list)),
                ("weaknesses", models.JSONField(blank=True, default=list)),
                ("opportunities", models.JSONField(blank=True, default=list)),
                ("growth_areas", models.JSONField(blank=True, default=list)),
                (
                    "leadership_score",
                    models.IntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "technical_score",
                    models.IntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "creativity_score",
                    models.IntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                (
                    "collaboration_score",
                    models.IntegerField(
                        default=5,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                    ),
                ),
                ("is_complete", models.BooleanField(default=False)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="outvier_profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Personal Profile",
                "verbose_name_plural": "Personal Profiles",
            },
        ),
        migrations.CreateModel(
            name="GoalMilestone",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("title", models.CharField(max_length=200)),
                ("description", models.TextField(blank=True)),
                ("target_date", models.DateField()),
                ("completed_date", models.DateField(blank=True, null=True)),
                ("is_completed", models.BooleanField(default=False)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "goal",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="milestones",
                        to="outvier.goal",
                    ),
                ),
            ],
            options={
                "verbose_name": "Goal Milestone",
                "verbose_name_plural": "Goal Milestones",
                "ordering": ["target_date"],
            },
        ),
    ]
